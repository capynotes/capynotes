from openai import OpenAI
from database import get_transcript_from_database, insert_diagrams_to_database, insert_diagram_key_to_database
import base64
import requests
from aws_utils import create_s3_client, get_bucket_name
import os

def mm(graph, file_path):
  graphbytes = graph.encode("utf8")
  base64_bytes = base64.b64encode(graphbytes)
  base64_string = base64_bytes.decode("ascii")
  
  url = "https://mermaid.ink/img/" + base64_string
  
  # Fetch the image using the URL
  response = requests.get(url)
  response.raise_for_status()  # Raise an exception if the request fails
  
  # Write the image data to a file
  with open(file_path, "wb") as f:
    f.write(response.content)

def upload_diagrams_to_S3(inserted_id, file_path, file_name):
  s3_client = create_s3_client()
  bucket_name = get_bucket_name()
  try:
    s3_client.upload_file(file_path, bucket_name, file_name)
    # Insert the unique file name of the diagram as diagram key to the diagram table in DB
    insert_diagram_key_to_database(inserted_id, file_name)
    return True
  except Exception as e:
    print(f"Error uploading file: {e}")
    return False

def parse_diagrams(gpt_response):
  print(gpt_response)
  diagram_codes = []
  lines = gpt_response.split('*')[1:]

  code_block = ""
  for line in lines:
      if '```mermaid' in line:
        code_block = line.replace('```mermaid', "")
      elif '```' in line:
        code_block = line.replace('```', "")
      elif 'mermaid' in line:
        code_block = line.replace('mermaid', "")
      else:
        code_block = line

      if '```' in code_block:
        code_block = code_block.replace('```', "")
      
      diagram_codes.append(code_block)
  return diagram_codes

def generate_diagrams(note_id):
  # api_key = os.getenv('GPT_API_KEY')
  client = OpenAI(api_key="")
  
  # Instructions for the generated diagrams
  pre_prompt = "Based on the following transcription, your aim is to generate diagrams showing the relations between topics, concepts, or titles. You need to generate a number of diagrams. You need to decide the number of diagrams based on the transcription's context. Some diagrams can be grouped together under 1 diagram in a meaningful way. The diagrams should be in Mermaid Diagramming Language. Do not forget to use “graph TB” in your diagrams. Do not use quotation marks in your diagrams outside of parentheses. Your diagrams should be comprehensive and logical. If the topic can be understood without a diagram(i.e. Too small, 1 line diagram), do not provide that diagram. If your diagram is too long to fit on a page, split it into parts. The provided diagrams’ context should not be similar to each other. Your output will be a bullet-pointed list(i.e., use asterisks for each diagram). Each bullet point will be for one diagram. Do not use any other symbol to separate the diagrams from each other. Make sure the diagramming language code you provided is correct and working. Here is the transcription: "
  
  # retrieve the transcription from database
  transcription = get_transcript_from_database(note_id)

  prompt = pre_prompt + transcription

  response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
      {"role": "user", "content": prompt},
    ]
  )

  # Accessing the answer generated by GPT
  completion = response.choices[0].message.content

  # Parse the bullet pointed diagram list
  diagram_codes = parse_diagrams(completion)


  path_prefix = "tmp/"

  for diagram in diagram_codes:
    # Insert the generated output to the database
    inserted_id = insert_diagrams_to_database(note_id, diagram)

    # File name is created uniquely based on the unique key in diagram table
    file_name = str(inserted_id) + ".png"

    
    # File path is created based on the name of the folder for the diagrams and the unique file name for the diagram
    file_path = path_prefix + file_name

    mm(diagram, file_path)

    upload_diagrams_to_S3(inserted_id, file_path, "diagrams/" + file_name)

    #Remove the newly created file from local
    os.remove(file_path)

